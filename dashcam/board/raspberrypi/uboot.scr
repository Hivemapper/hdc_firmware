# This script is modified from that provided by the upstream sources:
# Charles Steinkuehler at the BR2RAUC project:  https://github.com/cdsteinkuehler/br2rauc
# - GPLv2
# RAUC project contrib folder:  https://github.com/rauc/rauc/blob/master/contrib/uboot.sh
# - LGPLv2.1

test -n "${BOOT_ORDER}" || setenv BOOT_ORDER "A B"
test -n "${BOOT_A_LEFT}" || setenv BOOT_A_LEFT 3
test -n "${BOOT_B_LEFT}" || setenv BOOT_B_LEFT 3

# Items of note here:
# - We substitute our own init file to implement an overlay FS.
# - tty1 is the virtual terminal (HDMI display and USB keyboard).
# - ttyAMA0 is the serial console on GPIO pins 6/8/10.
default_bootargs="init=/opt/dashcam/bin/overlayroot.sh rootfstype=squashfs rootwait console=tty1 console=ttyAMA0,115200 coherent_pool=1M vc_mem.mem_base=0x3ec00000 vc_mem.mem_size=0x40000000"

# RPi firmware uses a dynamic fdt_addr, but U-Boot does not use the fw
# provided address if fdt_addr is already defined in the environment!
# Copy fdt_addr to a local variable and delete the environment variable
# so it never gets accidentally saved:
rpi_fdt_addr=${fdt_addr}
env delete fdt_addr

setenv bootargs
for BOOT_SLOT in "${BOOT_ORDER}"; do
  if test "x${bootargs}" != "x"; then
    # skip remaining slots
  elif test "x${BOOT_SLOT}" = "xA"; then
    if test ${BOOT_A_LEFT} -gt 0; then
      echo "Found valid slot A, ${BOOT_A_LEFT} attempts remaining"
      setexpr BOOT_A_LEFT ${BOOT_A_LEFT} - 1
      
      # Note that in 64-bit builds we change zImage to be Image.
      setenv load_kernel "fatload mmc 0:1 ${kernel_addr_r} zImage"
      setenv bootargs "${default_bootargs} root=/dev/mmcblk0p2 rauc.slot=A"
    fi
  elif test "x${BOOT_SLOT}" = "xB"; then
    if test ${BOOT_B_LEFT} -gt 0; then
      echo "Found valid slot B, ${BOOT_B_LEFT} attempts remaining"
      setexpr BOOT_B_LEFT ${BOOT_B_LEFT} - 1
      
      # Note that in 64-bit builds we change zImage to be Image.
      setenv load_kernel "fatload mmc 0:1 ${kernel_addr_r} zImage"
      setenv bootargs "${default_bootargs} root=/dev/mmcblk0p3 rauc.slot=B"
    fi
  fi
done

if test -n "${bootargs}"; then
  saveenv
else
  echo "No valid slot found, resetting tries to 3"
  setenv BOOT_A_LEFT 3
  setenv BOOT_B_LEFT 3
  saveenv
  reset
fi
	
echo "Loading kernel"
run load_kernel

echo "Starting kernel"

# Note that in 64-bit builds we change bootz to be booti.
bootz ${kernel_addr_r} - ${rpi_fdt_addr}
